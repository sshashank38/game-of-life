pipeline {
    agent {label 'GOL'} 
    triggers {
        cron('H * * * *')
    }
    options{
       
        timeout(time: 1, unit: 'HOURS') 
        timestamps()

    }
    stages {
        stage('Scm') { 
            steps {                 
                git credentialsId: 'jenkins_pwd', url: 'https://github.com/sshashank38/game-of-life.git'
                mail subject: "Build Started"  +env.BUILD_ID, body: "Build has started", to: 'abc@xyz'
            }
        }
        stage('Build') { 
            options {
                timeout(time: 15, unit: 'MINUTES') 
            }
            steps {
                sh 'mvn clean package'
            }
        }
        stage('SonarQube analysis') {
            steps{
                // performing sonarqube analysis with "withSonarQubeENV(<Name of Server configured in Jenkins>)"
                withSonarQubeEnv('SONAR-8.9LTS') {
                // requires SonarQube Scanner for Maven 3.2+
                    sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.2:sonar'
                }
            }
        }
    }
    post {
        // If Maven was able to run the tests, even if some of the test
        // failed, record the test results and archive the jar file.
        success {
            junit '**/TEST-*.xml'
            archive '**/*.war'
            mail subject: "Build Success"  +env.BUILD_ID, body: "Build is successful", to: 'abc@xyz'
        }
        failure {
            mail subject: "Build Failed "  +env.BUILD_URL, body: "Build has failed", to: 'abc@xyz'
        }
        always {
            echo "Finished"
        }
        changed {
            echo "Changed"
        }
        unstable {
            mail subject: 'BUILD Unstable '+env.BUILD_ID+'URL is '+env.BUILD_URL, to: 'devops@qt.com', from: 'jenkins@qt.com', body: 'EMPTY BODY'
        }
    }
}